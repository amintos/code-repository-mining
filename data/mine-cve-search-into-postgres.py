#!/usr/bin/env python3
# This is an ETL script for extrating relevant data from cve-search into the github PostgreSQL database
import psycopg2
import config
import time
import re

from pymongo import MongoClient
from cpe     import CPE

cveProductCreateTableStatement ="""
CREATE TABLE cve_per_product_version(
  cveid   VARCHAR(64),
  name    VARCHAR(256),
  version VARCHAR(64)
);
"""
cveProductInsertStatement = "INSERT INTO cve_per_product_version VALUES(%s,%s,%s);"
cveProductdropTableStatement   = "DROP TABLE IF EXISTS cve_per_product_version;"

cweCveCreateTableStatement ="""
CREATE TABLE cve_cwe_classification (
  cveid   VARCHAR(64),
  cweid   INTEGER
);
"""
cweCveInsertStatement = "INSERT INTO cve_cwe_classification VALUES(%s,%s);"
cweCveDropTableStatement   = "DROP TABLE IF EXISTS cve_cwe_classification;"

cweCreateTableStatement ="""
CREATE TABLE cwe (
  cweid      INTEGER,
  name       VARCHAR(1024),
  status     VARCHAR(1024),
 weaknessabs VARCHAR(1024),
 description VARCHAR(16384),
 PRIMARY KEY (cweid)
);
"""
cweInsertStatement = "INSERT INTO cwe VALUES(%s,%s,%s,%s,%s);"
cweDropTableStatement   = "DROP TABLE IF EXISTS cwe;"

cveRefCreateTableStatement ="""
CREATE TABLE cvereference (
  cveid      VARCHAR(64),
  reference  VARCHAR(4096)
);
"""
cveRefInsertStatement = "INSERT INTO cvereference VALUES(%s,%s);"
cveRefDropTableStatement   = "DROP TABLE IF EXISTS cvereference;"

cveCreateTableStatement ="""
CREATE TABLE cve (
  id      VARCHAR(64),
  cweid   INTEGER,
  summary VARCHAR(4096),
  cvss    FLOAT,
  published TIMESTAMP,
  PRIMARY KEY(id)
);
"""
cveInsertStatement = "INSERT INTO cve VALUES(%s,%s,%s,%s,%s);"
cveDropTableStatement   = "DROP TABLE IF EXISTS cve;"

postgresConnection = psycopg2.connect(dbname=config.postgresql.dbname,
                                      user=config.postgresql.user,
                                      password=config.postgresql.password)
postgresCursor = postgresConnection.cursor()

postgresCursor.execute(cveProductdropTableStatement)
postgresCursor.execute(cveProductCreateTableStatement)
postgresCursor.execute(cweCveDropTableStatement)
postgresCursor.execute(cweCveCreateTableStatement)
postgresCursor.execute(cweDropTableStatement)
postgresCursor.execute(cweCreateTableStatement)
postgresCursor.execute(cveRefDropTableStatement)
postgresCursor.execute(cveRefCreateTableStatement)
postgresCursor.execute(cveDropTableStatement)
postgresCursor.execute(cveCreateTableStatement)
postgresConnection.commit()

# set up MongoDB connection
mongoclient = MongoClient(config.mongodb.host, config.mongodb.port)
mongoCves   = mongoclient['cvedb']['cves']
mongoCwes   = mongoclient['cvedb']['cwe']

# extract relevant data from every cve in the mongodb
# and write it into the newly created postgres table
cverefcount = 0
cvecount = 0
cveproductcombinations = 0
cwecvecount = 0
versionRegex = re.compile("[0-9][0-9a-z-.]+")
for cve in mongoCves.find():
  # parsing and inserting cpe-cve combinations
  parsed_cpes = []

  try:
    parsed_cpes = [ CPE(s) for s in cve["vulnerable_configuration_cpe_2_2"] ]
  except:
    print("failed to parse CPEs from ", cve["id"])

  for_insertion = []
  for c in parsed_cpes:
    if versionRegex.match(c.get_version()[0]):
      for_insertion.append((cve["id"], c.get_product()[0],c.get_version()[0]))

  cvecount += 1
  cveproductcombinations += len(for_insertion)

  for row in for_insertion:
    try:
      postgresCursor.execute(cveProductInsertStatement, row)
    except:
      postgresConnection.commit()
      time.sleep(0.2)
      postgresCursor.execute(cveProductInsertStatement, row)

  # parsing and inserting references
  for_insertion = [ (cve["id"], ref) for ref in cve["references"] ]
  cverefcount += 1

  for row in for_insertion:
    try:
      postgresCursor.execute(cveRefInsertStatement, row)
    except:
      postgresConnection.commit()
      time.sleep(0.2)
      postgresCursor.execute(cveRefInsertStatement, row)

# insert cwe-cve combinations
  cve_id     = cve["id"]
  parsed_cwe = None
  cvss = None
  
# insert cwe-cve combinations
  if "cwe" in cve or cve["cwe"] != "Unknown":
    parsed_cwe = cve["cwe"].replace("CWE-", "")
    row        = (cve_id,parsed_cwe)

    try:
      postgresCursor.execute(cweCveInsertStatement, row)
    except:
      postgresConnection.commit()
      time.sleep(0.2)
      postgresCursor.execute(cweCveInsertStatement, row)

    cwecvecount += 1

  if "cvss" in cve:
    cvss = cve["cvss"]

  # save CVE info last
  cverow = (
    cve_id,
    parsed_cwe,
    cve["summary"],
    cve["cvss"],
    cve["Published"]
  )
  try:
    postgresCursor.execute(cveInsertStatement, cverow)
  except:
    postgresConnection.commit()
    time.sleep(0.2)
    postgresCursor.execute(cveInsertStatement, cverow)


cwecount = 0
for cwe in mongoCwes.find():
  row = (
      cwe["id"],
      cwe["name"],
      cwe["status"],
      cwe["weaknessabs"],
      cwe["description_summary"]
    )

  cwecount += 1

  try:
    postgresCursor.execute(cweInsertStatement, row)
  except:
    print(row)
    postgresConnection.commit()
    time.sleep(0.2)
    postgresCursor.execute(cweInsertStatement, row)

print("Inserted:")
print(cvecount, " CVEs ")
print(cverefcount, " CVE references")
print(cveproductcombinations, " CPE-CVE combinations")
print(cwecvecount, "CVE-CWE mappingss")
print(cwecount, " CWEs")

postgresConnection.commit()
postgresCursor.close()
postgresConnection.close()
